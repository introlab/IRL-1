#!/usr/bin/env python3

# This scripts lists IntRoLab CAN devices on a single bus by sending a "ALIVE"
# broadcast request and displaying which devices answered.
#
# Usage: lscandev can_if
#
# where can_if is the name of the CAN bus interface (can0, can1, etc.)

import socket
import struct
import time
from select import select

# The ALIVE packet as EFF CAN ID:
# Priority: 0 (3 bits)
# Type: 0x80 CAN_TYPE_EVENTS (8 bits)
# Boot: 00 (2 bits)
# Command: 0x00 CAN_EVENTS_CMD_ALIVE (8 bits)
# Destination 0xFF broadcast (8 bits)
# Full frame:
#   000 00001000 00 00000000 11111111
# Aligned to the right and padded to the left:
#   0000 0010 0000 0000 0000 0000 1111 1111
# In hexadecimal:
#   0x020000FF
alive_can_id = 0x020000FF


import socket, sys

if (len(sys.argv) < 2):
    print("Usage: %s can_if" % (sys.argv[0]))
    exit(-1)

sock = socket.socket(socket.PF_CAN, socket.SOCK_RAW, socket.CAN_RAW)
sock.setblocking(0)

interface = sys.argv[1]

try:
    sock.bind((interface,))
except OSError:
    sys.stderr.write("Could not bind to interface '%s'\n" % interface)
    exit(-1)

# The format is 4 bytes (unsigned int) for the can id and one byte for data
# length, plus data up to 8 bytes)
fmt = "<IB3x8s"
req_pkt = struct.pack(fmt, alive_can_id | socket.CAN_EFF_FLAG, 0, b"")

last_sent = 0
while(True):
    now = time.time()
    if (now - last_sent > 1.0):
        # Send every 1 sec
        sock.send(req_pkt)
        print("Broadcasted ALIVE request on %s" % (sys.argv[1]))
        last_sent = now

    # Now we wait for packets...
    ready = select([sock], [], [], 1) # Timeout of one sec.
    if ready[0]:
        pkt = sock.recv(16)
        if (pkt):
            # Unpack:
            can_id, length, data = struct.unpack(fmt, pkt)
            can_id &= socket.CAN_EFF_MASK
            dev_id = 0xFF & can_id
            print("Got response from %x" % (dev_id))
